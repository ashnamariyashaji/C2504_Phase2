Dashboard.xaml

 <Grid MaxWidth="1200">
     <Grid.RowDefinitions>
         <RowDefinition Height="auto"/>
         <RowDefinition Height="auto"/>
         <RowDefinition Height="*"/>
         <RowDefinition Height="auto"/>
     </Grid.RowDefinitions>

     <TextBlock Text="Dashboard Overview" FontSize="32" FontWeight="Bold" Grid.Row="0" Margin="10 20 10 10"/>

     <Grid Grid.Row="1" Margin="10 20 10 10">
         <Grid.ColumnDefinitions>
             <ColumnDefinition Width="*"/>
             <ColumnDefinition Width="*"/>
             <ColumnDefinition Width="*"/>
             <ColumnDefinition Width="*"/>
         </Grid.ColumnDefinitions>

         <Button x:Name="btnPatientSearch" Grid.Column="0" Content="Patient Search" FontSize="12"
             Background="white" FontWeight="Bold" Foreground="black" Height="80" 
             Style="{StaticResource ShadowButton}" Click="btnPatientSearch_Click"/>

         <Button x:Name="btnUserManager" Grid.Column="1" Margin="20 0 0 0" Content="User  Manager" FontSize="12"
             Background="white" FontWeight="Bold" Foreground="black" Style="{StaticResource ShadowButton}"
             Click="btnUser Manager_Click"/>

         <Button x:Name="btnAppointmentManager" Grid.Column="2" Margin="20 0 0 0" Content="Appointment Manager" FontSize="12"
             Background="white" FontWeight="Bold" Foreground="black" Style="{StaticResource ShadowButton}"
             Click="btnAppointmentManager_Click"/>

         <Button x:Name="btnAccountManager" Grid.Column="3" Margin="20 0 0 0" Content="Account Manager" FontSize="12"
             Background="white" FontWeight="Bold" Foreground="black" Style="{StaticResource ShadowButton}"
             Click="btnAccountManager_Click"/>
     </Grid>

     <Grid Grid.Row="2" Margin="10 20 10 10">
         <Grid.ColumnDefinitions>
             <ColumnDefinition Width="*"/>
             <ColumnDefinition Width="250"/>
         </Grid.ColumnDefinitions>

         <!-- Patient Summary Section -->
         <Border Grid.Column="0" Background="#D9E8FA" CornerRadius="3">
             <StackPanel Margin="10">
                 <TextBlock Text="Monitored Patients Summary" FontWeight="Bold"/>
                 <ListView x:Name="PatientSummaryListView" Margin="10">
                     <ListView.View>
                         <GridView>
                             <GridViewColumn Header="Patient Name" Width="150"/>
                             <GridViewColumn Header="Condition" Width="100"/>
                             <GridViewColumn Header="Last Blood Sugar" Width="120"/>
                             <GridViewColumn Header="Last Heart Rate" Width="120"/>
                         </GridView>
                     </ListView.View>
                 </ListView>
             </StackPanel>
         </Border>

         <!-- Alerts Section -->
         <Border Grid.Column="1" Background="#DCDCDC" Margin="10 0 0 0" CornerRadius="3">
             <StackPanel Margin="10">
                 <TextBlock Text="Alerts for Abnormal Readings" FontWeight="Bold"/>
                 <ListView x:Name="AlertsListView" Margin="10">
                     <ListView.View>
                         <GridView>
                             <GridViewColumn Header="Alert Type" Width="100"/>
                             <GridViewColumn Header="Patient Name" Width="150"/>
                             <GridViewColumn Header="Date" Width="100"/>
                         </GridView>
                     </ListView.View>
                 </ListView>
             </StackPanel>
         </Border>
     </Grid>

     <!-- KPIs Section -->
     <Grid Grid.Row="3" Margin="10 20 10 10">
         <TextBlock Text="Key Performance Indicators" FontWeight="Bold" FontSize="16" Margin="0 0 0 10"/>
         <StackPanel Orientation="Horizontal">
             <TextBlock Text="Average Blood Sugar: " FontWeight="Bold"/>
             <TextBlock x:Name="AverageBloodSugarText" Margin="5,0" />
             <TextBlock Text=" | Critical Patients Count: " FontWeight="Bold"/>
             <TextBlock x:Name="CriticalPatientsCountText" Margin="5,0" />
         </StackPanel>
     </Grid>
 </Grid>


----------------------------------

using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;

namespace CDMD
{
    public partial class AdminDashboard : Window
    {
        public AdminDashboard()
        {
            InitializeComponent();
            LoadDashboardData();
        }

        private void LoadDashboardData()
        {
            // Load patient summary data
            var patients = GetPatientsSummary();
            PatientSummaryListView.ItemsSource = patients;

            // Load alerts data
            var alerts = GetAlerts();
            AlertsListView.ItemsSource = alerts;

            // Load KPIs
            var averageBloodSugar = CalculateAverageBloodSugar();
            var criticalPatientsCount = CountCriticalPatients();
            AverageBloodSugarText.Text = averageBloodSugar.ToString("0.##");
            CriticalPatientsCountText.Text = criticalPatientsCount.ToString();
        }

        private List<PatientSummary> GetPatientsSummary()
        {
            // Fetch patient summary data from the database
            // This is a placeholder for actual database retrieval logic
            return new List<PatientSummary>
            {
                new PatientSummary { PatientName = "John Doe", Condition = "Diabetes", LastBloodSugar = 120, LastHeartRate = 75 },
                new PatientSummary { PatientName = "Jane Smith", Condition = "Hypertension", LastBloodSugar = 150, LastHeartRate = 80 },
                // Add more patient data as needed
            };
        }

        private List<Alert> GetAlerts()
        {
            // Fetch alert data from the database
            // This is a placeholder for actual database retrieval logic
            return new List<Alert>
            {
                new Alert { AlertType = "High Blood Sugar", PatientName = "John Doe", Date = DateTime.Now.AddMinutes(-30) },
                new Alert { AlertType = "Low Heart Rate", PatientName = "Jane Smith", Date = DateTime.Now.AddMinutes(-15) },
                // Add more alert data as needed
            };
        }

        private double CalculateAverageBloodSugar()
        {
            // Placeholder for calculating average blood sugar from the database
            return 135.0; // Example average value
        }

        private int CountCriticalPatients()
        {
            // Placeholder for counting critical patients from the database
            return 2; // Example count
        }

        private void btnPatientSearch_Click(object sender, RoutedEventArgs e)
        {
            // Implement patient search functionality
            MessageBox.Show("Patient search functionality to be implemented.");
        }

        private void btnUser _Manager_Click(object sender, RoutedEventArgs e)
        {
            // Open user management window
            MessageBox.Show("User   management functionality to be implemented.");
        }

        private void btnAppointmentManager_Click(object sender, RoutedEventArgs e)
        {
            // Open appointment management window
            MessageBox.Show("Appointment management functionality to be implemented.");
        }

        private void btnAccountManager_Click(object sender, RoutedEventArgs e)
        {
            // Open account management window
            MessageBox.Show("Account management functionality to be implemented.");
        }
    }

    public class PatientSummary
    {
        public string PatientName { get; set; }
        public string Condition { get; set; }
        public double LastBloodSugar { get; set; }
        public int LastHeartRate { get; set; }
    }

    public class Alert
    {
        public string AlertType { get; set; }
        public string PatientName { get; set; }
        public DateTime Date { get; set; }
    }
}
--------------------------------------------------------------------------------------------------

login.xaml
<Grid>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
    </Grid.ColumnDefinitions>
    <Border Grid.Column="0"  Background="AliceBlue" Width="300" Height="300" CornerRadius="5">
        <StackPanel Orientation="Vertical" VerticalAlignment="Center">
            <StackPanel Orientation="Vertical" Margin="10 10 10 0">
                <TextBlock  Text="Username" FontWeight="bold" Margin="10 10 10 5" FontSize="10"/>
                <TextBox x:Name="txtUsername" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" 
                         Text="{Binding CurrentUser.Email , UpdateSourceTrigger=PropertyChanged , Mode=TwoWay}"/>
            </StackPanel>

            <StackPanel Orientation="Vertical" Margin="10 0 10 10">
                <TextBlock Text="Password" FontWeight="bold" Margin="10 10 10 5" FontSize="10"/>
                <TextBox x:Name="txtPassword" Margin="10 0 10 10" Height="30" Padding="4 4 4 4"
                              Text="{Binding CurrentUser.PasswordHash , UpdateSourceTrigger=PropertyChanged , Mode=TwoWay}"/>
            </StackPanel>

            <Button Width="200" Content="Login" Height="30" Background="Teal" Foreground="white" FontWeight="Bold" FontSize="10" Margin="10 10 10 10" Command="{Binding LoginCommand}"/>
        </StackPanel>

    </Border>
</Grid>
-----------------------------------------------------

appointmentScheduling

 <Grid>
     <Grid.RowDefinitions>
         <RowDefinition Height="Auto"/>
         <RowDefinition Height="*"/>
         <RowDefinition Height="Auto"/>
     </Grid.RowDefinitions>

     <TextBlock Grid.Row="0" FontSize="20" FontWeight="Bold"
        HorizontalAlignment="Center" Margin="10" Foreground="Black">
 Appointment Scheduling
     </TextBlock>

     <Grid Grid.Row="1" Margin="10">
         <Grid.ColumnDefinitions>
             <ColumnDefinition Width="Auto"/>
             <ColumnDefinition Width="*"/>
         </Grid.ColumnDefinitions>
         <Grid.RowDefinitions>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>

         </Grid.RowDefinitions>

         <Label Grid.Row="0" Grid.Column="0" Content="Patient ID:" Margin="0,5,5,5" Foreground="Black"/>
         <TextBox x:Name="patientIDTextBox" Grid.Row="0" Grid.Column="1" Width="150" Margin="5,5,5,5"/>

         <Label Grid.Row="1" Grid.Column="0" Content="UserID:" Margin="0,5,5,5" Foreground="Black"/>
         <TextBox x:Name="userIDTextBox" Grid.Row="1" Grid.Column="1" Width="150" Margin="5,5,5,5"/>

         <Label Grid.Row="2" Grid.Column="0" Content="Appointment Date:" Margin="0,5,5,5" Foreground="Black"/>
         <DatePicker x:Name="appointmentDatePicker" Grid.Row="2" Grid.Column="1" Width="150" Margin="5,5,5,5"/>

         <Label Grid.Row="3" Grid.Column="0" Content="Appointment Time:" Margin="0,5,5,5" Foreground="Black"/>
         <StackPanel Grid.Row="3" Grid.Column="1" Orientation="Horizontal" Margin="5,5,5,5">
             <ComboBox x:Name="hourComboBox" Width="60" Margin="0,0,5,0">
                 <ComboBoxItem Content="08" />
                 <ComboBoxItem Content="09" />
                 <ComboBoxItem Content="10" />
             </ComboBox>
             <TextBlock Text=":" VerticalAlignment="Center" />
             <ComboBox Name="minuteComboBox" Width="60" Margin="5,0,0,0">
                 <ComboBoxItem Content="00" />
                 <ComboBoxItem Content="15" />
                 <ComboBoxItem Content="30" />
                 <ComboBoxItem Content="45" />
             </ComboBox>
         </StackPanel>

         <Label Grid.Row="4" Grid.Column="0" Content="Status:" Margin="0,5,5,5" Foreground="Black"/>
         <ComboBox Name="statusComboBox" Grid.Row="4" Grid.Column="1" Width="150" Margin="5,5,5,5">
             <ComboBoxItem Content="Scheduled" />
             <ComboBoxItem Content="Completed" />
             <ComboBoxItem Content="Canceled" />
         </ComboBox>

         <Label Grid.Row="5" Grid.Column="0" Content="Notes:" Margin="0,5,5,5" Foreground="Black"/>
         <TextBox x:Name="notesTextBox" Grid.Row="5" Grid.Column="1" Width="150" Height="80" AcceptsReturn="True"
          Margin="5,5,5,5" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" />
     </Grid>

     <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="10">
         <Button x:Name="saveButton" Content="Save" Width="100" Margin="5"  />
         <Button x:Name="cancelButton" Content="Cancel" Width="100" Margin="5" />
     </StackPanel>

 </Grid>

PatientSearch

 <Grid MaxWidth="1200">
     <Grid.RowDefinitions>
         <RowDefinition Height="auto"/>
         <RowDefinition Height="*"/>
         <RowDefinition Height="auto"/>
     </Grid.RowDefinitions>

     <TextBlock Text="Patient Search" FontSize="32" FontWeight="Bold" Grid.Row="0" Margin="10 20 10 10"/>

     <Grid Grid.Row="1" Margin="10 20 10 10">
         <Grid.ColumnDefinitions>
             <ColumnDefinition Width="*"/>
             <ColumnDefinition Width="*"/>
         </Grid.ColumnDefinitions>

         <StackPanel Grid.Column="0" Margin="10">
             <TextBlock Text="Search by Name" FontWeight="Bold"/>
             <TextBox x:Name="txtSearchByName" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" />
             <Button Content="Search" Background="Green" Foreground="white" FontWeight="Bold" Width="100" Height="30" Margin="10 0 10 10" Click="btnSearchByName_Click"/>
         </StackPanel>

         <StackPanel Grid.Column="1" Margin="10">
             <TextBlock Text="Search by ID" FontWeight="Bold"/>
             <TextBox x:Name="txtSearchByID" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" />
             <Button Content="Search" Background="Green" Foreground="white" FontWeight="Bold" Width="100" Height="30" Margin="10 0 10 10" Click="btnSearchByID_Click"/>
         </StackPanel>
     </Grid>

     <DataGrid x:Name="dgPatients" Grid.Row="2" Margin="10 20 10 10" AutoGenerateColumns="False">
         <DataGrid.Columns>
             <DataGridTextColumn Header="Patient ID" Binding="{Binding PatientID}"/>
             <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
             <DataGridTextColumn Header="Age" Binding="{Binding Age}"/>
             <DataGridTextColumn Header="Contact Number" Binding="{Binding ContactNumber}"/>
         </DataGrid.Columns>
     </DataGrid>
 </Grid>
------------------------------------------------------------------------

cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace PatientManagementSystem
{
    public partial class PatientSearchWindow : Window
    {
        public PatientSearchWindow()
        {
            InitializeComponent();
        }

        private void btnSearchByName_Click(object sender, RoutedEventArgs e)
        {
            string searchName = txtSearchByName.Text;
            List<Patient> patients = PatientRepository.Instance.GetPatientsByName(searchName);
            dgPatients.ItemsSource = patients;
        }

        private void btnSearchByID_Click(object sender, RoutedEventArgs e)
        {
            int searchID = Convert.ToInt32(txtSearchByID.Text);
            Patient patient = PatientRepository.Instance.GetPatientByID(searchID);
            if (patient != null)
            {
                List<Patient> patients = new List<Patient> { patient };
                dgPatients.ItemsSource = patients;
            }
            else
            {
                MessageBox.Show("Patient not found", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}

////////////////////////////////////////////////////

///////////////////////////////////////////////////

EFTreatmentplan

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CDMD_Project.Entities;
using CDMD_Project.Repo;

namespace CDMD_Project.EFRepo
{
    public class EFTreatmentPlansRepo : ITreatmentPlansRepo
    {
        //    private static EFTreatmentPlansRepo _instance;
        //    public static EFTreatmentPlansRepo Instance

        //    {
        //        get
        //        {
        //            if (Instance == null)
        //            {
        //                _instance = new EFTreatmentPlansRepo();
        //            }

        //            return _instance;
        //        }
        //    }

        //    private CdmdDbEntities _context;


        //    private EFTreatmentPlansRepo()
        //    {
        //        _context = new CdmdDbEntities();
        //    }

        //    public void Create(TreatmentPlan treatmentPlan)
        //    {
        //        _context.TreatmentPlans.Add(treatmentPlan);
        //        _context.SaveChanges();
        //    }

        //    public void Update(TreatmentPlan treatmentPlan)
        //    {
        //        _context.SaveChanges();
        //    }


        private static EFTreatmentPlansRepo _instance;
        public static EFTreatmentPlansRepo Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new EFTreatmentPlansRepo();
                }

                return _instance;
            }
        }

        private CdmdDbEntities _context;

        private EFTreatmentPlansRepo()
        {
            _context = new CdmdDbEntities();
        }


        public void Create(TreatmentPlan treatmentPlan)
        {
            _context.TreatmentPlans.Add(treatmentPlan);
            _context.SaveChanges();
        }

        public void Update(TreatmentPlan treatmentPlan)
        {
            var existingTreatmentPlan = _context.TreatmentPlans.Find(treatmentPlan.PlanID);
            if (existingTreatmentPlan != null)
            {
                existingTreatmentPlan.PlanDetails = treatmentPlan.PlanDetails;
                existingTreatmentPlan.Medications = treatmentPlan.Medications;
                existingTreatmentPlan.DietPlan = treatmentPlan.DietPlan;
                existingTreatmentPlan.ExercisePlan = treatmentPlan.ExercisePlan;
                existingTreatmentPlan.FollowUpDate = treatmentPlan.FollowUpDate;
                existingTreatmentPlan.StartDate = treatmentPlan.StartDate;
                existingTreatmentPlan.EndDate = treatmentPlan.EndDate;
                _context.SaveChanges();
            }
        }

        //
        public Patient GetPatientByPhonenumber(string phoneNumber)
        {
            return _context.Patients.FirstOrDefault(p => p.PhoneNumber == phoneNumber);
        }

        public ObservableCollection<TreatmentPlan> GetTreatmentPlansByPatientId(int patientId)
        {
            var treatmentPlans = _context.TreatmentPlans.Where(tp => tp.PatientID == patientId).ToList();
            return new ObservableCollection<TreatmentPlan>(treatmentPlans);
        }
    }

}

-----------------------------------------------------------------------------------------
TreatmentPlan.cs

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDMD_Project.Entities
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;

    public partial class TreatmentPlan
    {
        [Key]
        public int PlanID { get; set; }
       // [ForeignKey("User")]
        public Nullable<int> PatientID { get; set; }
        [ForeignKey("User")]
        public Nullable<int> DoctorID { get; set; }

        public string PlanDetails { get; set; }
        public Nullable<System.DateTime> StartDate { get; set; }
        public Nullable<System.DateTime> EndDate { get; set; }
        public string Medications { get; set; }
        public string DietPlan { get; set; }
        public string ExercisePlan { get; set; }
        public Nullable<System.DateTime> FollowUpDate { get; set; }
        public Nullable<System.DateTime> CreatedAt { get; set; }

        public virtual Patient Patient { get; set; }
        
          public virtual User User { get; set; }


    }
}

--------------------------------------------------------------------
xaml

<Window x:Class="CDMD_Project.Pages.TreatmentPlanWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CDMD_Project.Pages"
        mc:Ignorable="d"
        Title="TreatmentPlanWindow" Height="823" Width="800">
    <Grid Margin="20">
        <StackPanel>
            <TextBlock Text="Treatment Plan" FontWeight="Bold" FontSize="24" Margin="0,0,0,20"/>

            <StackPanel Orientation="Horizontal" Margin="0,0,0,20">
                <TextBlock Text="Phone Number:" VerticalAlignment="Center" Width="100"/>
                <TextBox x:Name="txtPhoneNumber" Width="200" Margin="10,0,0,0" 
                         Text="{Binding PatientPhoneNumber, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="Search" Width="100" Margin="10,0,0,0" Command="{Binding SearchCommand}"/>
                <Button Content="New" Width="100" Margin="10,0,0,0" Command="{Binding NewCommand}"/>
            </StackPanel>

            <DataGrid x:Name="dgPatientDetails" Margin="0,20,0,0" 
                      ItemsSource="{Binding PatientDetails}" AutoGenerateColumns="False" Height="200">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Full Name" Binding="{Binding FullName,Mode=TwoWay}" Width="150"/>
                    <DataGridTextColumn Header="Age" Binding="{Binding Age,Mode=TwoWay}" Width="50"/>
                    <DataGridTextColumn Header="Gender" Binding="{Binding Gender,Mode=TwoWay}" Width="50"/>
                    <DataGridTextColumn Header="Condition" Binding="{Binding Condition,Mode=TwoWay}" Width="150"/>
                </DataGrid.Columns>
            </DataGrid>

            <TextBlock Text="Treatment Plan Details" FontWeight="Bold" FontSize="18" Margin="0,20,0,10"/>

            <StackPanel Orientation="Vertical" Margin="0,10,0,0">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Plan Details:" VerticalAlignment="Center" Width="100"/>
                    <TextBox x:Name="txtPlanDetails" Width="400" Height="100" TextWrapping="Wrap" Margin="10,0,0,0" Text="{Binding NewTreatmentPlan.PlanDetails, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                    <TextBlock Text="Medications:" VerticalAlignment="Center" Width="100"/>
                    <TextBox x:Name="txtMedications" Width="400" Height="30" Margin="10,0,0,0" Text="{Binding NewTreatmentPlan.Medications, UpdateSourceTrigger=PropertyChanged}" />
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                    <TextBlock Text="Diet Plan:" VerticalAlignment="Center" Width="100"/>
                    <TextBox x:Name="txtDietPlan" Width="400" Height="30" Margin="10,0,0,0" Text="{Binding NewTreatmentPlan.DietPlan, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                    <TextBlock Text="Exercise Plan:" VerticalAlignment="Center" Width="100"/>
                    <TextBox x:Name="txtExercisePlan" Width="400" Height="30" Margin="10,0,0,0" Text="{Binding NewTreatmentPlan.ExercisePlan, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                    <TextBlock Text="Follow-Up Date:" VerticalAlignment="Center" Width="100"/>
                    <DatePicker x:Name="dpFollowUpDate" Width="200" Margin="10,0,0,0" SelectedDate="{Binding NewTreatmentPlan.FollowUpDate, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                    <TextBlock Text="Start Date:" VerticalAlignment="Center" Width="100"/>
                    <DatePicker x:Name="dpStartDate" Width="200" Margin="10,0,0,0" SelectedDate="{Binding NewTreatmentPlan.StartDate, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                    <TextBlock Text="End Date:" VerticalAlignment="Center" Width="100"/>
                    <DatePicker x:Name="dpEndDate" Width="200" Margin="10,0,0,0" SelectedDate="{Binding NewTreatmentPlan.EndDate, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="0,20,0,0">
                <Button x:Name="btnSubmit" Content="Submit Treatment Plan" Width="150" Margin="0,0,10,0" Command="{Binding CreateCommand}"/>
                <!--<Button x:Name="btnUpdate" Content="Update Treatment Plan" Width="150" Margin="0,0,10,0" Command="{Binding UpdateCommand}"/>-->
            </StackPanel>
        </StackPanel>
    </Grid>
</Window>

-----------------------------
xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using CDMD_Project.ViewModel;

namespace CDMD_Project.Pages
{
    /// <summary>
    /// Interaction logic for TreatmentPlanWindow.xaml
    /// </summary>
    public partial class TreatmentPlanWindow : Window
    {

        public TreatmentPlanWindow()
        {
            InitializeComponent();
            var Viewmodel = new TreatmentPlanViewModel();
            this.DataContext = Viewmodel;
        }

    }
}
-------------------------------------------------
ITreatmentPlanRepo

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CDMD_Project.Entities;

namespace CDMD_Project.Repo
{
    public interface ITreatmentPlansRepo 
    {
        void Update(TreatmentPlan treatmentPlan);
        void Create (TreatmentPlan treatmentPlan);

         Patient GetPatientByPhonenumber(string phoneNumber);
        ObservableCollection<TreatmentPlan> GetTreatmentPlansByPatientId(int patientId); // New method
    
}
}
----------------------------------------------------------------------------------------------------------

viewmodel

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CDMD_Project.Repo;
using CDMD_Project.Entities;
using CDMD_Project.Pages;
using CDMD_Project.Command;
using CDMD_Project.EFRepo;
using System.Windows.Input;
using System.Windows;
using System.Collections.ObjectModel;

namespace CDMD_Project.ViewModel
{
 // public delegate void DWindwoClose();
    public class TreatmentPlanViewModel : ViewModelBase
    {
        public ITreatmentPlansRepo _repo = EFTreatmentPlansRepo.Instance;
        private TreatmentPlan _newTreatmentPlan;

        // public string PatientPhoneNumber { get; set; }  
        // public ICommand SearchCommand { get; set; }

        public ObservableCollection<Patient> PatientDetails { get; set; } // Collection to hold patient details

        public string PatientPhoneNumber { get; set; } // Property for the phone number

        public ICommand SearchCommand { get; set; }

        public ICommand NewCommand { get; set; }
        public TreatmentPlan NewTreatmentPlan
        {
            get
            {
                return _newTreatmentPlan;
            }
            set
            {
                _newTreatmentPlan = value;
                OnPropertyChanged(nameof(NewTreatmentPlan));
            }
        }

        public ICommand CreateCommand { get; set; }

        public TreatmentPlanViewModel()
        {
            NewTreatmentPlan = new TreatmentPlan
            {
                PlanDetails = "",
                Medications = "",
                DietPlan = "",
                ExercisePlan = "",
                FollowUpDate = null,
                StartDate = null,
                EndDate = null
            };

            CreateCommand = new RelayCommand(Create);
             
            NewCommand = new RelayCommand(ToNew);

            PatientDetails = new ObservableCollection<Patient>(); 
            SearchCommand = new RelayCommand(SearchPatientByPhoneNumber); 
            ToNew();
        }
         

        public void Create()
        {
            try
            {
                var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
                        caption: "Confirm",
                        button: MessageBoxButton.YesNo,
                        icon: MessageBoxImage.Question);
                if (result != MessageBoxResult.Yes)
                {
                    return;
                }

                _repo.Create(NewTreatmentPlan);

                result = MessageBox.Show(messageBoxText: "Created Successfully",
                caption: "Alert",
                button: MessageBoxButton.OK,
                icon: MessageBoxImage.Information);

                NewTreatmentPlan = new TreatmentPlan
                {
                    PlanDetails = "",
                    Medications = "",
                    DietPlan = "",
                    ExercisePlan = "",
                    FollowUpDate = null,
                    StartDate = null,
                    EndDate = null
                };
                ToNew();
            }
            catch (Exception ex)
            {
                //MessageBox.Show($"{ex.InnerException}");
                MessageBox.Show($"Error: {ex.Message}");
            }
           

    }

        public void ToNew()
        {
            
           PatientDetails.Clear();
        }

        //
        public void SearchPatientByPhoneNumber()
        {
            try
            {
                var patient = _repo.GetPatientByPhonenumber(PatientPhoneNumber);
                if (patient != null)
                {
                    PatientDetails.Clear(); // Clear existing details
                    PatientDetails.Add(patient);
                    
                }
                else
                {
                    MessageBox.Show("Patient not found.", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }



    }
}

--------------------------------------------------------------

formconfig

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CDMD_Project.Pages;
using CDMD_Project.ViewModel;

namespace CDMD_Project
{
    public static class FormConfig
    {
        public static int UserId { get; set; }
        public static LoginWindow loginWindow = null;
        public static DashboardWindow dashboardWindow = null;
        public static TreatmentPlanWindow treatmentPlanWindow = null;
        public static TreatmentPlanViewModel treatmentPlanViewModel = null;
        public static UpdateTreatmentPlanWindow updateTreatmentPlanWindow = null;
        public static PatientProfilePage patientProfilePage = null;
        public static PatientViewModel patientViewModel = null;

        static FormConfig()
        {
            loginWindow = new LoginWindow();
            dashboardWindow = new DashboardWindow();
            treatmentPlanWindow = new TreatmentPlanWindow();
            treatmentPlanViewModel = new TreatmentPlanViewModel();
            updateTreatmentPlanWindow = new UpdateTreatmentPlanWindow();
            patientProfilePage = new PatientProfilePage();
            patientViewModel = new PatientViewModel();
        }

        
    }
}

